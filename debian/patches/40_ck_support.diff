--- a/sesman/session.c
+++ b/sesman/session.c
@@ -258,8 +258,12 @@
     list_add_item(sessvc_params, (long)g_strdup(wmpid_str));
     list_add_item(sessvc_params, 0); /* mandatory */
 
+    log_message(LOG_LEVEL_DEBUG, "Changing sessvc process to user %s", username);
+
     env_set_user(username, 0, display);
 
+    log_message(LOG_LEVEL_DEBUG, "Starting %s", exe_path);
+
     /* executing sessvc */
     g_execvp(exe_path, ((char **)sessvc_params->items));
 
@@ -288,7 +292,7 @@
     g_sigterm(xpid);
     g_sigterm(wmpid);
     g_sleep(1000);
-    auth_end(data);
+    //auth_end(data);	// disable to use session only during setup
     g_exit(0);
 }
 
@@ -455,11 +459,13 @@
     {
         g_tcp_close(g_sck);
         g_tcp_close(g_thread_sck);
-        auth_start_session(data, display);
+
+        log_message(LOG_LEVEL_DEBUG, "Starting auth_start_session in pid %d", g_getpid());
+
+        //auth_start_session(data, display); // moved to later in the flow to only open the connection for setup
         g_sprintf(geometry, "%dx%d", width, height);
         g_sprintf(depth, "%d", bpp);
         g_sprintf(screen, ":%d", display);
-        g_sleep(100);     // wait a little time to allow the display chain to be filled in parent thread
         xpid = g_fork();
 
         if (xpid == -1)
@@ -469,9 +475,13 @@
         }
         else if (xpid == 0) /* child (child sesman) xserver */
         {
+            log_message(LOG_LEVEL_DEBUG, "Forked the process for running xserver for user %s as pid %d", username, g_getpid());
+
             env_set_user(username, passwd_file, display);
             env_check_password_file(passwd_file, password);
 
+            log_message(LOG_LEVEL_DEBUG, "Running xserver process as user %s", username);
+
             if (type == SESMAN_SESSION_TYPE_XVNC)
             {
                 xserver_params = list_create();
@@ -488,7 +498,7 @@
 
                 /* additional parameters from sesman.ini file */
                 //config_read_xserver_params(SESMAN_SESSION_TYPE_XVNC,
-                //                           xserver_params);
+                //                           xserver_params);c
                 list_append_list_strdup(g_cfg->vnc_params, xserver_params, 0);
 
                 /* make sure it ends with a zero */
@@ -548,21 +558,28 @@
         }
         else /* parent (child sesman) */
         {
-            wmpid = g_fork();
+            log_message(LOG_LEVEL_DEBUG, "Starting windowmanager and sessvc in pid %d", g_getpid());
 
-            if (wmpid == -1)
-            {
-                log_message(LOG_LEVEL_ERROR, "cannot fork process for wm"
-                    " - user %s, display=%d, sessioncount=%d", username, display, g_session_count);
-            }
-            else if (wmpid == 0) /* child */
+            wait_for_xserver(display);
+            if (x_server_running(display))
             {
-                wait_for_xserver(display);
-                env_set_user(username, 0, display);
+                wmpid = g_fork();
 
-                if (x_server_running(display))
+                if (wmpid == -1)
+                {
+                    log_message(LOG_LEVEL_ERROR, "cannot fork process for wm"
+                        " - user %s, display=%d, sessioncount=%d", username, display, g_session_count);
+                }
+                else if (wmpid == 0) /* child */
                 {
+                    log_message(LOG_LEVEL_DEBUG, "Forked the process for running windowmanager for user %s as pid %d", username, g_getpid());
+
+                    env_set_user(username, 0, display);
+                    auth_start_session(data, display);	// moved from above
                     auth_set_env(data);
+                    auth_end(data);			// moved from end session
+
+                    log_message(LOG_LEVEL_DEBUG, "Running windowmanager process as user %s", username);
 
                     if (directory != 0)
                     {
@@ -576,6 +593,8 @@
                     {
                         if (program[0] != 0)
                         {
+                            log_message(LOG_LEVEL_DEBUG, "Starting program %s for user %s", program, username);
+
                             g_execlp3(program, program, 0);
                             log_message(LOG_LEVEL_ALWAYS,
                                         "error starting program %s for user %s - pid %d",
@@ -590,6 +609,7 @@
 
                         if (g_file_exist(text))
                         {
+                            log_message(LOG_LEVEL_DEBUG, "Starting user windowmanager %s for user %s", text, username);
                             g_execlp3(text, g_cfg->user_wm, 0);
                             log_message(LOG_LEVEL_ALWAYS, "error starting user "
                                         "wm for user %s - pid %d", username, g_getpid());
@@ -608,6 +628,8 @@
                     /* if we're here something happened to g_execlp3
                        so we try running the default window manager */
                     g_sprintf(text, "%s/%s", XRDP_CFG_PATH, g_cfg->default_wm);
+
+                    log_message(LOG_LEVEL_DEBUG, "Starting default windowmanager %s for user %s", text, username);
                     g_execlp3(text, g_cfg->default_wm, 0);
 
                     log_message( LOG_LEVEL_ALWAYS, "error starting default "
@@ -622,6 +644,7 @@
                                 g_cfg->default_wm);
 
                     /* still a problem starting window manager just start xterm */
+                    log_message(LOG_LEVEL_DEBUG, "Starting xterm");
                     g_execlp3("xterm", "xterm", 0);
 
                     /* should not get here */
@@ -631,67 +654,63 @@
                     log_message(LOG_LEVEL_DEBUG, "errno: %d, description: "
                                 "%s", errno, g_get_strerror());
                 }
-                else
+                else /* parent (child sesman)*/
                 {
-                    log_message(LOG_LEVEL_ERROR, "another Xserver might "
-                                "already be active on display %d - see log", display);
-                }
+                    log_message(LOG_LEVEL_DEBUG, "Starting sessvc in pid %d", g_getpid());
 
-                log_message(LOG_LEVEL_DEBUG, "aborting connection...");
-                g_exit(0);
-            }
-            else /* parent (child sesman)*/
-            {
-                wait_for_xserver(display);
-                if (x_server_running(display))
-                {
-                    g_snprintf(text, 255, "%d", display);
+                    g_snprintf(text, 256, "%d", display);
                     g_setenv("XRDP_SESSVC_DISPLAY", text, 1);
-                    g_snprintf(text, 255, ":%d.0", display);
+                    g_snprintf(text, 256, ":%d.0", display);
                     g_setenv("DISPLAY", text, 1);
                     /* new style waiting for clients */
                     session_start_sessvc(xpid, wmpid, data, username, display);
                 }
             }
+            else
+            {
+                 log_message(LOG_LEVEL_ERROR, "another Xserver might "
+                             "already be active on display %d - see log", display);
+            }
+
+            log_message(LOG_LEVEL_DEBUG, "aborting connection...");
+            g_exit(0);
         }
     }
     else /* parent sesman process */
     {
-        wait_for_xserver(display);
-        if (x_server_running(display))
-        {
-            temp->item->pid = pid;
-            temp->item->display = display;
-            temp->item->width = width;
-            temp->item->height = height;
-            temp->item->bpp = bpp;
-            temp->item->data = data;
-            g_strncpy(temp->item->client_ip, client_ip, 255);   /* store client ip data */
-            g_strncpy(temp->item->name, username, 255);
-
-            ltime = g_time1();
-            localtime_r(&ltime, &stime);
-            temp->item->connect_time.year = (tui16)(stime.tm_year + 1900);
-            temp->item->connect_time.month = (tui8)stime.tm_mon;
-            temp->item->connect_time.day = (tui8)stime.tm_mday;
-            temp->item->connect_time.hour = (tui8)stime.tm_hour;
-            temp->item->connect_time.minute = (tui8)stime.tm_min;
-            zero_time(&(temp->item->disconnect_time));
-            zero_time(&(temp->item->idle_time));
-
-            temp->item->type = type;
-            temp->item->status = SESMAN_SESSION_STATUS_ACTIVE;
-
-            /*THREAD-FIX require chain lock */
-            lock_chain_acquire();
-
-            temp->next = g_sessions;
-            g_sessions = temp;
-            g_session_count++;
-
-            /*THREAD-FIX release chain lock */
-            lock_chain_release();
-        }
+        temp->item->pid = pid;
+        temp->item->display = display;
+        temp->item->width = width;
+        temp->item->height = height;
+        temp->item->bpp = bpp;
+        temp->item->data = data;
+        g_strncpy(temp->item->client_ip, client_ip, 255);   /* store client ip data */
+        g_strncpy(temp->item->name, username, 255);
+
+        ltime = g_time1();
+        localtime_r(&ltime, &stime);
+        temp->item->connect_time.year = (tui16)(stime.tm_year + 1900);
+        temp->item->connect_time.month = (tui8)stime.tm_mon;
+        temp->item->connect_time.day = (tui8)stime.tm_mday;
+        temp->item->connect_time.hour = (tui8)stime.tm_hour;
+        temp->item->connect_time.minute = (tui8)stime.tm_min;
+        zero_time(&(temp->item->disconnect_time));
+        zero_time(&(temp->item->idle_time));
+
+        temp->item->type = type;
+        temp->item->status = SESMAN_SESSION_STATUS_ACTIVE;
+
+        log_message(LOG_LEVEL_DEBUG, "Going to register pid %d and display %d for user %s", pid, display, username);
+        /*THREAD-FIX require chain lock */
+        lock_chain_acquire();
+
+        temp->next = g_sessions;
+        g_sessions = temp;
+        g_session_count++;
+
+        /*THREAD-FIX release chain lock */
+        lock_chain_release();
+        log_message(LOG_LEVEL_DEBUG, "Registered pid %d and display %d for user %s", pid, display, username);
     }
 
     return display;
@@ -717,7 +736,12 @@
         }
         else if (pid == 0)
         {
+            log_message(LOG_LEVEL_DEBUG, "Change forked process to user %s", username);
+
             env_set_user(username, 0, display);
+
+            log_message(LOG_LEVEL_DEBUG, "Reconnect to windowmanager process %s as user %s", text, username);
+
             g_execlp3(text, g_cfg->default_wm, 0);
             g_exit(0);
         }
