--- a/common/os_calls.c
+++ b/common/os_calls.c
@@ -2595,6 +2595,11 @@
         g_mk_temp_dir(0);
     }
 
+    if (rv == -1)
+    {
+        log_message(LOG_LEVEL_ERROR, "Error forking process with error: %d", errno);
+    }
+
     return rv;
 #endif
 }
--- a/sesman/sessvc/sessvc.c
+++ b/sesman/sessvc/sessvc.c
@@ -30,6 +30,9 @@
 #include "file_loc.h"
 #include "os_calls.h"
 #include "arch.h"
+#include "log.h"
+
+#define LOGM(_args) do { log_message _args ; } while (0)
 
 static int g_term = 0;
 
@@ -81,7 +84,13 @@
     int wm_pid = 0;
     int x_pid = 0;
     int lerror = 0;
+    int pid = 0;
+    char text[256];
+    char *home_text;
     char exe_path[262];
+    char log_file[256];
+    enum logReturns error;
+    struct log_config logconfig;
 
     g_init("xrdp-sessvc");
     g_memset(exe_path, 0, sizeof(exe_path));
@@ -93,6 +102,57 @@
         return 1;
     }
 
+    home_text = g_getenv("HOME");
+
+    if (home_text == 0)
+    {
+        g_writeln("error reading HOME environment variable");
+        g_deinit();
+        return 1;
+    }
+
+    pid = g_getpid();
+
+    /* starting logging subsystem */
+    g_memset(&logconfig, 0, sizeof(struct log_config));
+    logconfig.program_name = "xrdp-sessvc";
+    g_snprintf(log_file, 255, "%s/xrdp-sessvc.log", home_text);
+    g_writeln("sessvc::main: using log file [%s]", log_file);
+
+    if (g_file_exist(log_file))
+    {
+        g_file_delete(log_file);
+    }
+
+    logconfig.log_file = log_file;
+    logconfig.fd = -1;
+    logconfig.log_level = LOG_LEVEL_INFO;
+    logconfig.enable_syslog = 0;
+    logconfig.syslog_level = 0;
+    error = log_start_from_param(&logconfig);
+
+    if (error != LOG_STARTUP_OK)
+    {
+        switch (error)
+        {
+            case LOG_ERROR_MALLOC:
+                g_writeln("error on malloc. cannot start logging. quitting.");
+                break;
+            case LOG_ERROR_FILE_OPEN:
+                g_writeln("error opening log file [%s]. quitting.",
+                          getLogFile(text, 255));
+                break;
+            default:
+                g_writeln("log_start error");
+                break;
+        }
+
+        g_deinit();
+        return 1;
+    }
+
+    LOGM((LOG_LEVEL_ALWAYS, "main: app started pid %d(0x%8.8x)", pid, pid));
+
     g_signal_kill(term_signal_handler); /* SIGKILL */
     g_signal_terminate(term_signal_handler); /* SIGTERM */
     g_signal_user_interrupt(term_signal_handler); /* SIGINT */
@@ -101,11 +161,15 @@
     wm_pid = g_atoi(argv[2]);
     g_writeln("xrdp-sessvc: waiting for X (pid %d) and WM (pid %d)",
               x_pid, wm_pid);
+
+    LOGM((LOG_LEVEL_ALWAYS, "main: app configured for xpid %d and wmpid %d", x_pid, wm_pid));
+
     /* run xrdp-chansrv as a seperate process */
     chansrv_pid = g_fork();
 
     if (chansrv_pid == -1)
     {
+        LOGM((LOG_LEVEL_ERROR, "main: fork failed with %d", g_get_errno()));
         g_writeln("xrdp-sessvc: fork error");
         g_deinit();
         return 1;
@@ -114,7 +178,13 @@
     {
         g_set_current_dir(XRDP_SBIN_PATH);
         g_snprintf(exe_path, 261, "%s/xrdp-chansrv", XRDP_SBIN_PATH);
+
+        LOGM((LOG_LEVEL_INFO, "main: fork success, starting %s/xrdp-chansrv", exe_path));
+
         g_execlp3(exe_path, "xrdp-chansrv", 0);
+
+        LOGM((LOG_LEVEL_ERROR, "main: %s/xrdp-chansrv not started, errno=%d", exe_path, lerror));
+
         /* should not get here */
         g_writeln("xrdp-sessvc: g_execlp3() failed");
         g_deinit();
@@ -136,10 +206,14 @@
         lerror = g_get_errno();
     }
 
+    LOGM((LOG_LEVEL_INFO, "main: wm finished with waitpid=%d and errno=%d", ret, lerror));
     g_writeln("xrdp-sessvc: WM is dead (waitpid said %d, errno is %d) "
               "exiting...", ret, lerror);
+
     /* kill channel server */
+    LOGM((LOG_LEVEL_INFO, "main: sending chansrv(pid %d) the term signal", chansrv_pid));
     g_writeln("xrdp-sessvc: stopping channel server");
+
     g_sigterm(chansrv_pid);
     ret = g_waitpid(chansrv_pid);
 
@@ -149,9 +223,13 @@
         g_sleep(1);
     }
 
+    LOGM((LOG_LEVEL_INFO, "main: going to cleanup chansrv"));
     chansrv_cleanup(chansrv_pid);
+
     /* kill X server */
+    LOGM((LOG_LEVEL_INFO, "main: going to terminate X server with pid %d", x_pid));
     g_writeln("xrdp-sessvc: stopping X server");
+
     g_sigterm(x_pid);
     ret = g_waitpid(x_pid);
 
@@ -161,6 +239,7 @@
         g_sleep(1);
     }
 
+    LOGM((LOG_LEVEL_INFO, "main: clean exit"));
     g_writeln("xrdp-sessvc: clean exit");
     g_deinit();
     return 0;
--- a/sesman/chansrv/chansrv.c
+++ b/sesman/chansrv/chansrv.c
@@ -1230,7 +1230,7 @@
 
     logconfig.log_file = log_file;
     logconfig.fd = -1;
-    logconfig.log_level = LOG_LEVEL_ERROR;
+    logconfig.log_level = LOG_LEVEL_INFO;
     logconfig.enable_syslog = 0;
     logconfig.syslog_level = 0;
     error = log_start_from_param(&logconfig);
--- a/sesman/session.c
+++ b/sesman/session.c
@@ -448,6 +448,8 @@
 
     if (pid == -1)
     {
+        log_message(LOG_LEVEL_ERROR, "cannot fork process for wm and x"
+                    " - user %s, display=%d, sessioncount=%d", username, display, g_session_count);
     }
     else if (pid == 0) /* child sesman */
     {
@@ -461,6 +463,8 @@
 
         if (wmpid == -1)
         {
+            log_message(LOG_LEVEL_ERROR, "cannot fork process for wm"
+                    " - user %s, display=%d, sessioncount=%d", username, display, g_session_count);
         }
         else if (wmpid == 0) /* child (child sesman) xserver */
         {
@@ -553,6 +557,8 @@
 
             if (xpid == -1)
             {
+                log_message(LOG_LEVEL_ERROR, "cannot fork process for x"
+                    " - user %s, display=%d, sessioncount=%d", username, display, g_session_count);
             }
             else if (xpid == 0) /* child */
             {
@@ -695,6 +701,8 @@
 
     if (pid == -1)
     {
+        log_message(LOG_LEVEL_ERROR, "cannot create new chain "
+                    "element - display %d, user %s", display, username);
     }
     else if (pid == 0)
     {
