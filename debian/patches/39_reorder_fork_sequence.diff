--- a/sesman/session.c
+++ b/sesman/session.c
@@ -460,185 +460,185 @@
         g_sprintf(depth, "%d", bpp);
         g_sprintf(screen, ":%d", display);
         g_sleep(100);     // wait a little time to allow the display chain to be filled in parent thread
-        wmpid = g_fork();
+        xpid = g_fork();
 
-        if (wmpid == -1)
+        if (xpid == -1)
         {
-            log_message(LOG_LEVEL_ERROR, "cannot fork process for wm"
+            log_message(LOG_LEVEL_ERROR, "cannot fork process for x"
                     " - user %s, display=%d, sessioncount=%d", username, display, g_session_count);
         }
-        else if (wmpid == 0) /* child (child sesman) xserver */
+        else if (xpid == 0) /* child (child sesman) xserver */
         {
-            wait_for_xserver(display);
-            env_set_user(username, 0, display);
+            env_set_user(username, passwd_file, display);
+            env_check_password_file(passwd_file, password);
 
-            if (x_server_running(display))
+            if (type == SESMAN_SESSION_TYPE_XVNC)
             {
-                auth_set_env(data);
-
-                if (directory != 0)
-                {
-                    if (directory[0] != 0)
-                    {
-                        g_set_current_dir(directory);
-                    }
-                }
-
-                if (program != 0)
-                {
-                    if (program[0] != 0)
-                    {
-                        g_execlp3(program, program, 0);
-                        log_message(LOG_LEVEL_ALWAYS,
-                                    "error starting program %s for user %s - pid %d",
-                                    program, username, g_getpid());
-                    }
-                }
-
-                /* try to execute user window manager if enabled */
-                if (g_cfg->enable_user_wm)
-                {
-                    g_sprintf(text, "%s/%s", g_getenv("HOME"), g_cfg->user_wm);
-
-                    if (g_file_exist(text))
-                    {
-                        g_execlp3(text, g_cfg->user_wm, 0);
-                        log_message(LOG_LEVEL_ALWAYS, "error starting user "
-                                    "wm for user %s - pid %d", username, g_getpid());
-                        /* logging parameters */
-                        log_message(LOG_LEVEL_DEBUG, "errno: %d, "
-                                    "description: %s", errno, g_get_strerror());
-                        log_message(LOG_LEVEL_DEBUG, "execlp3 parameter "
-                                    "list:");
-                        log_message(LOG_LEVEL_DEBUG, "        argv[0] = %s",
-                                    text);
-                        log_message(LOG_LEVEL_DEBUG, "        argv[1] = %s",
-                                    g_cfg->user_wm);
-                    }
-                }
-
-                /* if we're here something happened to g_execlp3
-                   so we try running the default window manager */
-                g_sprintf(text, "%s/%s", XRDP_CFG_PATH, g_cfg->default_wm);
-                g_execlp3(text, g_cfg->default_wm, 0);
-
-                log_message( LOG_LEVEL_ALWAYS, "error starting default "
-                             "wm for user %s - pid %d", username, g_getpid());
-                /* logging parameters */
-                log_message( LOG_LEVEL_DEBUG, "errno: %d, description: "
-                             "%s", errno, g_get_strerror());
-                log_message(LOG_LEVEL_DEBUG, "execlp3 parameter list:");
-                log_message(LOG_LEVEL_DEBUG, "        argv[0] = %s",
-                            text);
-                log_message(LOG_LEVEL_DEBUG, "        argv[1] = %s",
-                            g_cfg->default_wm);
-
-                /* still a problem starting window manager just start xterm */
-                g_execlp3("xterm", "xterm", 0);
-
-                /* should not get here */
-                log_message(LOG_LEVEL_ALWAYS, "error starting xterm "
-                            "for user %s - pid %d", username, g_getpid());
-                /* logging parameters */
-                log_message(LOG_LEVEL_DEBUG, "errno: %d, description: "
-                            "%s", errno, g_get_strerror());
+                xserver_params = list_create();
+                xserver_params->auto_free = 1;
+                /* these are the must have parameters */
+                list_add_item(xserver_params, (long)g_strdup("Xvnc"));
+                list_add_item(xserver_params, (long)g_strdup(screen));
+                list_add_item(xserver_params, (long)g_strdup("-geometry"));
+                list_add_item(xserver_params, (long)g_strdup(geometry));
+                list_add_item(xserver_params, (long)g_strdup("-depth"));
+                list_add_item(xserver_params, (long)g_strdup(depth));
+                list_add_item(xserver_params, (long)g_strdup("-rfbauth"));
+                list_add_item(xserver_params, (long)g_strdup(passwd_file));
+
+                /* additional parameters from sesman.ini file */
+                //config_read_xserver_params(SESMAN_SESSION_TYPE_XVNC,
+                //                           xserver_params);
+                list_append_list_strdup(g_cfg->vnc_params, xserver_params, 0);
+
+                /* make sure it ends with a zero */
+                list_add_item(xserver_params, 0);
+                pp1 = (char **)xserver_params->items;
+                log_message(LOG_LEVEL_INFO, "Xvnc start:%s", dumpItemsToString(xserver_params, execvpparams, 2048));
+                g_execvp("Xvnc", pp1);
+            }
+            else if (type == SESMAN_SESSION_TYPE_XRDP)
+            {
+                xserver_params = list_create();
+                xserver_params->auto_free = 1;
+                /* these are the must have parameters */
+                list_add_item(xserver_params, (long)g_strdup("X11rdp"));
+                list_add_item(xserver_params, (long)g_strdup(screen));
+                list_add_item(xserver_params, (long)g_strdup("-geometry"));
+                list_add_item(xserver_params, (long)g_strdup(geometry));
+                list_add_item(xserver_params, (long)g_strdup("-depth"));
+                list_add_item(xserver_params, (long)g_strdup(depth));
+
+                /* additional parameters from sesman.ini file */
+                //config_read_xserver_params(SESMAN_SESSION_TYPE_XRDP,
+                //                           xserver_params);
+                list_append_list_strdup(g_cfg->rdp_params, xserver_params, 0);
+
+                /* make sure it ends with a zero */
+                list_add_item(xserver_params, 0);
+                pp1 = (char **)xserver_params->items;
+                log_message(LOG_LEVEL_INFO, "X11rdp start:%s", dumpItemsToString(xserver_params, execvpparams, 2048));
+                g_execvp("X11rdp", pp1);
             }
             else
             {
-                log_message(LOG_LEVEL_ERROR, "another Xserver might "
-                            "already be active on display %d - see log", display);
+                log_message(LOG_LEVEL_ALWAYS, "bad session type - "
+                            "user %s - pid %d", username, g_getpid());
+                g_exit(1);
             }
 
-            log_message(LOG_LEVEL_DEBUG, "aborting connection...");
-            g_exit(0);
+            /* should not get here */
+            log_message(LOG_LEVEL_ALWAYS, "error starting X server "
+                        "- user %s - pid %d", username, g_getpid());
+
+            /* logging parameters */
+            log_message(LOG_LEVEL_DEBUG, "errno: %d, description: "
+                        "%s", errno, g_get_strerror());
+            log_message(LOG_LEVEL_DEBUG, "execve parameter list size: "
+                        "%d", (xserver_params)->count);
+
+            for (i = 0; i < (xserver_params->count); i++)
+            {
+                log_message(LOG_LEVEL_DEBUG, "        argv[%d] = %s",
+                            i, (char *)list_get_item(xserver_params, i));
+            }
+
+            list_delete(xserver_params);
+            g_exit(1);
         }
         else /* parent (child sesman) */
         {
-            xpid = g_fork();
+            wmpid = g_fork();
 
-            if (xpid == -1)
+            if (wmpid == -1)
             {
-                log_message(LOG_LEVEL_ERROR, "cannot fork process for x"
+                log_message(LOG_LEVEL_ERROR, "cannot fork process for wm"
                     " - user %s, display=%d, sessioncount=%d", username, display, g_session_count);
             }
-            else if (xpid == 0) /* child */
+            else if (wmpid == 0) /* child */
             {
-                env_set_user(username, passwd_file, display);
-                env_check_password_file(passwd_file, password);
+                wait_for_xserver(display);
+                env_set_user(username, 0, display);
 
-                if (type == SESMAN_SESSION_TYPE_XVNC)
-                {
-                    xserver_params = list_create();
-                    xserver_params->auto_free = 1;
-                    /* these are the must have parameters */
-                    list_add_item(xserver_params, (long)g_strdup("Xvnc"));
-                    list_add_item(xserver_params, (long)g_strdup(screen));
-                    list_add_item(xserver_params, (long)g_strdup("-geometry"));
-                    list_add_item(xserver_params, (long)g_strdup(geometry));
-                    list_add_item(xserver_params, (long)g_strdup("-depth"));
-                    list_add_item(xserver_params, (long)g_strdup(depth));
-                    list_add_item(xserver_params, (long)g_strdup("-rfbauth"));
-                    list_add_item(xserver_params, (long)g_strdup(passwd_file));
-
-                    /* additional parameters from sesman.ini file */
-                    //config_read_xserver_params(SESMAN_SESSION_TYPE_XVNC,
-                    //                           xserver_params);
-                    list_append_list_strdup(g_cfg->vnc_params, xserver_params, 0);
-
-                    /* make sure it ends with a zero */
-                    list_add_item(xserver_params, 0);
-                    pp1 = (char **)xserver_params->items;
-                    log_message(LOG_LEVEL_INFO, "Xvnc start:%s", dumpItemsToString(xserver_params, execvpparams, 2048));
-                    g_execvp("Xvnc", pp1);
-                }
-                else if (type == SESMAN_SESSION_TYPE_XRDP)
-                {
-                    xserver_params = list_create();
-                    xserver_params->auto_free = 1;
-                    /* these are the must have parameters */
-                    list_add_item(xserver_params, (long)g_strdup("X11rdp"));
-                    list_add_item(xserver_params, (long)g_strdup(screen));
-                    list_add_item(xserver_params, (long)g_strdup("-geometry"));
-                    list_add_item(xserver_params, (long)g_strdup(geometry));
-                    list_add_item(xserver_params, (long)g_strdup("-depth"));
-                    list_add_item(xserver_params, (long)g_strdup(depth));
-
-                    /* additional parameters from sesman.ini file */
-                    //config_read_xserver_params(SESMAN_SESSION_TYPE_XRDP,
-                    //                           xserver_params);
-                    list_append_list_strdup(g_cfg->rdp_params, xserver_params, 0);
-
-                    /* make sure it ends with a zero */
-                    list_add_item(xserver_params, 0);
-                    pp1 = (char **)xserver_params->items;
-                    log_message(LOG_LEVEL_INFO, "X11rdp start:%s", dumpItemsToString(xserver_params, execvpparams, 2048));
-                    g_execvp("X11rdp", pp1);
-                }
-                else
+                if (x_server_running(display))
                 {
-                    log_message(LOG_LEVEL_ALWAYS, "bad session type - "
-                                "user %s - pid %d", username, g_getpid());
-                    g_exit(1);
-                }
+                    auth_set_env(data);
 
-                /* should not get here */
-                log_message(LOG_LEVEL_ALWAYS, "error starting X server "
-                            "- user %s - pid %d", username, g_getpid());
-
-                /* logging parameters */
-                log_message(LOG_LEVEL_DEBUG, "errno: %d, description: "
-                            "%s", errno, g_get_strerror());
-                log_message(LOG_LEVEL_DEBUG, "execve parameter list size: "
-                            "%d", (xserver_params)->count);
+                    if (directory != 0)
+                    {
+                        if (directory[0] != 0)
+                        {
+                            g_set_current_dir(directory);
+                        }
+                    }
 
-                for (i = 0; i < (xserver_params->count); i++)
+                    if (program != 0)
+                    {
+                        if (program[0] != 0)
+                        {
+                            g_execlp3(program, program, 0);
+                            log_message(LOG_LEVEL_ALWAYS,
+                                        "error starting program %s for user %s - pid %d",
+                                        program, username, g_getpid());
+                        }
+                    }
+
+                    /* try to execute user window manager if enabled */
+                    if (g_cfg->enable_user_wm)
+                    {
+                        g_sprintf(text, "%s/%s", g_getenv("HOME"), g_cfg->user_wm);
+
+                        if (g_file_exist(text))
+                        {
+                            g_execlp3(text, g_cfg->user_wm, 0);
+                            log_message(LOG_LEVEL_ALWAYS, "error starting user "
+                                        "wm for user %s - pid %d", username, g_getpid());
+                            /* logging parameters */
+                            log_message(LOG_LEVEL_DEBUG, "errno: %d, "
+                                        "description: %s", errno, g_get_strerror());
+                            log_message(LOG_LEVEL_DEBUG, "execlp3 parameter "
+                                        "list:");
+                            log_message(LOG_LEVEL_DEBUG, "        argv[0] = %s",
+                                        text);
+                            log_message(LOG_LEVEL_DEBUG, "        argv[1] = %s",
+                                        g_cfg->user_wm);
+                        }
+                    }
+
+                    /* if we're here something happened to g_execlp3
+                       so we try running the default window manager */
+                    g_sprintf(text, "%s/%s", XRDP_CFG_PATH, g_cfg->default_wm);
+                    g_execlp3(text, g_cfg->default_wm, 0);
+
+                    log_message( LOG_LEVEL_ALWAYS, "error starting default "
+                                 "wm for user %s - pid %d", username, g_getpid());
+                    /* logging parameters */
+                    log_message( LOG_LEVEL_DEBUG, "errno: %d, description: "
+                                 "%s", errno, g_get_strerror());
+                    log_message(LOG_LEVEL_DEBUG, "execlp3 parameter list:");
+                    log_message(LOG_LEVEL_DEBUG, "        argv[0] = %s",
+                                text);
+                    log_message(LOG_LEVEL_DEBUG, "        argv[1] = %s",
+                                g_cfg->default_wm);
+
+                    /* still a problem starting window manager just start xterm */
+                    g_execlp3("xterm", "xterm", 0);
+
+                    /* should not get here */
+                    log_message(LOG_LEVEL_ALWAYS, "error starting xterm "
+                                "for user %s - pid %d", username, g_getpid());
+                    /* logging parameters */
+                    log_message(LOG_LEVEL_DEBUG, "errno: %d, description: "
+                                "%s", errno, g_get_strerror());
+                }
+                else
                 {
-                    log_message(LOG_LEVEL_DEBUG, "        argv[%d] = %s",
-                                i, (char *)list_get_item(xserver_params, i));
+                    log_message(LOG_LEVEL_ERROR, "another Xserver might "
+                                "already be active on display %d - see log", display);
                 }
 
-                list_delete(xserver_params);
-                g_exit(1);
+                log_message(LOG_LEVEL_DEBUG, "aborting connection...");
+                g_exit(0);
             }
             else /* parent (child sesman)*/
             {
@@ -705,24 +705,26 @@
     int pid;
     char text[256];
 
-    pid = g_fork();
-
-    if (pid == -1)
+    g_snprintf(text, 255, "%s/%s", XRDP_CFG_PATH, "reconnectwm.sh");
+    if (g_file_exist(text))
     {
-        log_message(LOG_LEVEL_ERROR, "cannot create new chain "
-                    "element - display %d, user %s", display, username);
-    }
-    else if (pid == 0)
-    {
-        env_set_user(username, 0, display);
-        g_snprintf(text, 255, "%s/%s", XRDP_CFG_PATH, "reconnectwm.sh");
+        pid = g_fork();
 
-        if (g_file_exist(text))
+        if (pid == -1)
+        {
+            log_message(LOG_LEVEL_ERROR, "cannot create new chain "
+                    "element - display %d, user %s", display, username);
+        }
+        else if (pid == 0)
         {
+            env_set_user(username, 0, display);
             g_execlp3(text, g_cfg->default_wm, 0);
+            g_exit(0);
         }
-
-        g_exit(0);
+    }
+    else
+    {
+        log_message(LOG_LEVEL_DEBUG, "No reconnect script (%s) present, so skipping.", text);
     }
 
     return display;
